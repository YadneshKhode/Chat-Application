{"version":3,"sources":["redux/chats/chat.type.js","redux/chats/chat.reducer.js","redux/user/user.type.js","redux/user/user.reducer.js","redux/root-reducer.js","redux/store.js","components/chat/chat.component.jsx","components/input/input.component.jsx","components/chat/message.component.jsx","components/chat/chat-message.component.jsx","components/infoBar/infobar.component.jsx","redux/user/user.action.js","firebase.js","redux/chats/chats.action.js","components/sidebar-chat/sidebarchat.component.jsx","components/sidebar/sidebar.component.jsx","pages/chatpage/chatpage.component.jsx","pages/userDetailPage/userDetailPage.component.jsx","assets/images/chat.png","pages/loginpage/login.component.jsx","assets/images/404error.svg","pages/errorPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["ChatActionTypes","ADD_USERNAME","ADD_ROOM","ADD_CURRENT_MESSAGE","ADD_TO_MESSAGES","CLEAR_STATE","ADD_IN_USERS","initialState","username","room","message","messages","usersList","chatReducer","state","action","type","payload","UserActionTypes","LOGIN","LOGOUT","user","userReducer","persistConfig","key","storage","whitelist","rootReducer","combineReducers","chat","persistReducer","socket","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","persistor","persistStore","Input","React","memo","setMessage","sendMessage","placeholder","value","onChange","e","target","onKeyPress","IconButton","onClick","className","Message","mess","createdAt","i","length","isSentByCurrentUser","lastMessageRef","useRef","useEffect","current","scrollIntoView","smooth","ref","ChatMessage","currentRoomMessages","filter","map","connect","props","lastCreatedAt","logout","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","provider","GoogleAuthProvider","clearState","SidebarChat","displayPhoto","Avatar","src","alt","Chat","ENDPOINT","addUserName","addRoomName","addMessage","addMessToArr","clearChatState","addToUsers","email","useState","setMessages","toggle","setToggle","process","io","emit","error","alert","off","on","fulldata","users","to","signOut","preventDefault","photo","displayName","dispatch","addCurrentMessage","addToMessages","name","Chatpage","addUser","addRoom","setRoom","event","required","LoginPage","signInWithPopup","catch","errorPage","withRouter","login","onAuthStateChanged","authUser","uid","photoURL","exact","path","render","component","UserDetails","ErrorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1de7a04d.chunk.js","sourcesContent":["const ChatActionTypes = {\n  ADD_USERNAME: \"ADD_USERNAME\",\n  ADD_ROOM: \"ADD_ROOM\",\n  ADD_CURRENT_MESSAGE: \"ADD_CURRENT_MESSAGE\",\n  ADD_TO_MESSAGES: \"ADD_TO_MESSAGES\",\n  CLEAR_STATE: \"CLEAR_STATE\",\n  ADD_IN_USERS: \"ADD_IN_USERS\",\n};\nexport default ChatActionTypes;\n","import ChatActionTypes from \"./chat.type\";\n\nconst initialState = {\n  username: \"\",\n  room: \"\",\n  message: \"\",\n  messages: [],\n  usersList: [],\n};\n\nconst chatReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ChatActionTypes.ADD_USERNAME:\n      return {\n        ...state,\n        username: action.payload,\n      };\n    case ChatActionTypes.ADD_ROOM:\n      return {\n        ...state,\n        room: action.payload,\n      };\n    case ChatActionTypes.ADD_CURRENT_MESSAGE:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case ChatActionTypes.ADD_TO_MESSAGES:\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n      };\n    case ChatActionTypes.CLEAR_STATE:\n      return {\n        username: \"\",\n        room: \"\",\n        message: \"\",\n        messages: [],\n      };\n    case ChatActionTypes.ADD_IN_USERS:\n      return {\n        ...state,\n        usersList: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default chatReducer;\n","const UserActionTypes = {\n  LOGIN: \"LOGIN\",\n  LOGOUT: \"LOGOUT\",\n};\nexport default UserActionTypes;\n","import UserActionTypes from \"./user.type\";\n\nconst initialState = {\n  user: null,\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UserActionTypes.LOGIN:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case UserActionTypes.LOGOUT:\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport chatReducer from \"./chats/chat.reducer\";\nimport userReducer from \"./user/user.reducer\";\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"chat\",\"user\"],\n};\n\nconst rootReducer = combineReducers({\n  chat: chatReducer,\n  user: userReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nexport const persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistStore };\n","import { IconButton } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport Input from \"../input/input.component\";\nimport ChatMessage from \"./chat-message.component\";\nimport CancelRoundedIcon from \"@material-ui/icons/CancelRounded\";\nimport InfoBar from \"../infoBar/infobar.component\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport { Link } from \"react-router-dom\";\nimport { logout } from \"../../redux/user/user.action\";\nimport { auth } from \"../../firebase\";\nimport GroupIcon from \"@material-ui/icons/Group\";\nimport FormatListBulletedIcon from \"@material-ui/icons/FormatListBulleted\";\nimport {\n  addCurrentMessage,\n  addToMessages,\n  clearState,\n  addToUsers,\n} from \"../../redux/chats/chats.action\";\nimport { connect } from \"react-redux\";\nimport SidebarChat from \"../sidebar-chat/sidebarchat.component\";\n\nlet socket;\n\nconst Chat = React.memo((props) => {\n  const {\n    addUserName,\n    addRoomName,\n    addMessage,\n    addMessToArr,\n    clearChatState,\n    logout,\n    addToUsers,\n    displayPhoto,\n    usersList,\n    email,\n    username,\n    room,\n  } = props;\n\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [toggle, setToggle] = useState([]);\n  // const ENDPOINT = \"http://localhost:5000\";\n  // const ENDPOINT = \"https://yadnesh-chat-application.herokuapp.com/\";\n  let ENDPOINT;\n  if (process.env.NODE_ENV === \"development\") {\n    ENDPOINT = \"http://localhost:5000\";\n  } else {\n    ENDPOINT = process.env.REACT_APP_ENDPOINT;\n  }\n\n  // state is cleared when component is loaded first time or removed\n  // useEffect(() => {\n  //   clearChatState();\n  // }, [clearChatState]);\n\n  useEffect(() => {\n    //getting values from URL and storing to redux state\n\n    //passing domain to \"io\"\n    socket = io(ENDPOINT);\n    // //setting state\n    // setName(userName);\n    // //dispatching action\n    // addUserName(username);\n    // //setting state\n    // setRoom(roomName);\n    // //dispatching action\n    // addRoomName(room);\n\n    // Transmitting the object \" { username, room, displayPhoto,e mail }\" as soon as someone joins the room\n    //The join keyword is reserved in socket.io and is executed whenever a new connection is made\n    //\"(error)=>\" is a callback function triggered from the server ( server calls this function )\n    socket.emit(\"join\", { username, room, displayPhoto, email }, (error) => {\n      if (error) {\n        alert(error);\n      }\n    });\n\n    return () => {\n      socket.off(\"join\"); // turn off the current connection instance.\n    };\n  }, [ENDPOINT, addRoomName, room, username, addUserName, displayPhoto, email]);\n\n  //Receiver for the message emitted by the server\n  useEffect(() => {\n    socket.on(\"message\", (fulldata) => {\n      //adding data to existing array of messages\n      setMessages([...messages, fulldata]);\n      //dispatching action to update redux state of messages\n      addMessToArr(fulldata);\n    });\n    return () => {\n      socket.off(\"message\");\n    };\n  }, [messages, addMessToArr, addToUsers]);\n  useEffect(() => {\n    //Receiver for room-data sent from server this function is executed whenever a new connection joins the room or leaves the room\n    socket.on(\"roomData\", ({ users }) => {\n      //dispatching action to updaqte redux state\n      addToUsers(users);\n    });\n    return () => {\n      socket.off(\"roomData\");\n    };\n  });\n  //Transmitter for sending messages to server\n  const sendMessage = (e) => {\n    e.preventDefault();\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => {\n        //setting state\n        setMessage(\"\");\n        //dispatching action\n        addMessage(\"\");\n      });\n    }\n  };\n\n  const signMeOut = () => {\n    //dispatching action to clear user object in redux\n    logout();\n    clearChatState();\n    auth.signOut();\n    //Method provided by firebase to log out the user\n  };\n\n  const toggleMe = () => {\n    //used to show / hide list of current active users in mobile view\n    if (toggle) {\n      setToggle(false);\n    } else {\n      setToggle(true);\n    }\n  };\n  // const leaveRoom = () => {\n  //   socket.emit(\"leftRoom\", room, username);\n  // };\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <GroupIcon className=\"groupIcon\" />\n        <InfoBar room={room} />\n        <div className=\"chat__headerRight\">\n          <IconButton>\n            <div className=\"tooltip\">\n              <FormatListBulletedIcon\n                className=\"white memberIcon\"\n                onClick={toggleMe}\n              />\n              <span className=\"tooltiptext\">Group Members</span>\n            </div>\n          </IconButton>\n          <IconButton>\n            <div className=\"tooltip\">\n              <Link to=\"/room\"  className=\"exit__button\">\n                <CancelRoundedIcon className=\"white\" />\n              </Link>\n              <span className=\"tooltiptext\">Exit Chat Room</span>\n            </div>\n          </IconButton>\n          <IconButton>\n            <div className=\"tooltip\">\n              <Link to=\"/\" className=\"logout__button\" onClick={signMeOut}>\n                <span className=\"tooltiptext\">Log out</span>\n                <ExitToAppIcon className=\"white\" />\n              </Link>\n            </div>\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"chat__body\">\n        {toggle ? (\n          <ChatMessage username={username} messages={messages} />\n        ) : (\n          <>\n            <div className=\"sidebar__search\">\n              <h4 className=\"userList\">Users currently online</h4>\n            </div>\n            <div className=\"sidebar__chats\">\n              {usersList ? (\n                usersList.map((user, i) => (\n                  <div key={i}>\n                    <SidebarChat\n                      username={user.username}\n                      displayPhoto={user.displayPhoto}\n                    />\n                  </div>\n                ))\n              ) : (\n                <SidebarChat />\n              )}\n            </div>\n          </>\n        )}\n      </div>\n      <div className=\"chat__footer\">\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n        />\n      </div>\n    </div>\n  );\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addMessage: (message) => dispatch(addCurrentMessage(message)),\n    addMessToArr: (message) => dispatch(addToMessages(message)),\n    clearChatState: () => dispatch(clearState()),\n    logout: () => dispatch(logout()),\n    addToUsers: (name) => dispatch(addToUsers(name)),\n  };\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    displayPhoto: state.user.user.photo,\n    photo: state.user.user.photo,\n    displayName: state.user.user.displayName,\n    usersList: state.chat.usersList,\n    email: state.user.user.email,\n    username: state.chat.username,\n    room: state.chat.room,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\n","import React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nconst Input = React.memo(({ message, setMessage, sendMessage }) => {\n  // Input field of chat application calls sendMessage which is a function in parent component which emits the message to server \n  return (\n    <>\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Type a message\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyPress={(e) => (e.key === \"Enter\" ? sendMessage(e) : null)}\n        />\n      </form>\n      <IconButton onClick={(e) => sendMessage(e)}>\n        <SendIcon className=\"white\" />\n      </IconButton>\n    </>\n  );\n});\n\nexport default Input;\n","import React, { useRef, useEffect } from \"react\";\nconst Message = ({\n  mess: { user, message, createdAt },\n  username,\n  i,\n  length,\n}) => {\n  let isSentByCurrentUser = false;\n\n  if (user === username) isSentByCurrentUser = true;\n\n  const lastMessageRef = useRef();\n  useEffect(() => {\n    if (lastMessageRef.current) {\n      lastMessageRef.current.scrollIntoView({ smooth: true });\n    }\n  });\n\n  return isSentByCurrentUser ? (\n    <div\n      className=\"chat__message chat__receiver\"\n      ref={i === length ? lastMessageRef : null}\n    >\n      <span className=\"chat__name\">{user}</span>\n      <div className=\"chatContainer\">\n        <span className=\"chat__mess\">{message}</span>\n        <span className=\"chat__timestamp\">{createdAt}</span>\n      </div>\n    </div>\n  ) : (\n    <div className=\"chat__message\" ref={i === length ? lastMessageRef : null}>\n      <span className=\"chat__name\">{user}</span>\n      {message}\n      <span className=\"chat__timestamp\">{createdAt}</span>\n    </div>\n  );\n};\nexport default Message;\n","import React from \"react\";\nimport Message from \"./message.component\";\nimport { connect } from \"react-redux\";\n\nconst ChatMessage = React.memo(({ username, messages, room }) => {\n   // used to find the last message so I can add useRef to it and use scrolllIntoView by comparing the index and length\n  const currentRoomMessages = messages.filter(\n    (message) => message.room === room\n  );\n  const length = currentRoomMessages.length - 1;\n  return (\n    <>\n      {currentRoomMessages.map((mess, i) => (\n        <div key={i}>\n          <Message mess={mess} username={username} length={length} i={i} />\n          {/* passing index so I can compare it with length to find th elast message */}\n        </div>\n      ))}\n    </>\n  );\n});\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.chat.username,\n    messages: state.chat.messages,\n    room: state.chat.room,\n  };\n};\n\nexport default connect(mapStateToProps)(ChatMessage);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst InfoBar = (props) => {\n  const { room, messages } = props;\n\n  let lastCreatedAt;\n  //Taking timestamp of latest message and displaying it\n  messages.length > 0\n    ? (lastCreatedAt = messages[messages.length - 1].createdAt)\n    : (lastCreatedAt = \"\");\n\n  return (\n    <div className=\"chat__headerInfo\">\n      <h3 className=\"white\">\n        {room} &nbsp;\n      </h3>\n      <p className=\"white\">Last message at {lastCreatedAt}</p>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    room: state.chat.room,\n    messages: state.chat.messages,\n  };\n};\nexport default connect(mapStateToProps)(InfoBar);\n","import UserActionTypes from \"./user.type\";\n\nexport const login = (user) => ({\n  type: UserActionTypes.LOGIN,\n  payload: user,\n});\nexport const logout = () => ({\n  type: UserActionTypes.LOGOUT,\n});\n","import firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBq6aBUf_3EnNoiGHxYdc5yoniFqQ1NMmc\",\n  authDomain: \"chat-application-1ad88.firebaseapp.com\",\n  projectId: \"chat-application-1ad88\",\n  storageBucket: \"chat-application-1ad88.appspot.com\",\n  messagingSenderId: \"410508817932\",\n  appId: \"1:410508817932:web:35e04662df4676793aa029\",\n  measurementId: \"G-YCHSK7SQ8L\",\n};\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","import ChatActionTypes from \"./chat.type\";\n\nexport const addUser = (name) => ({\n  type: ChatActionTypes.ADD_USERNAME,\n  payload: name,\n});\nexport const addRoom = (room) => ({\n  type: ChatActionTypes.ADD_ROOM,\n  payload: room,\n});\nexport const addCurrentMessage = (message) => ({\n  type: ChatActionTypes.ADD_CURRENT_MESSAGE,\n  payload: message,\n});\nexport const addToMessages = (message) => ({\n  type: ChatActionTypes.ADD_TO_MESSAGES,\n  payload: message,\n});\nexport const addToUsers = (name) => ({\n  type: ChatActionTypes.ADD_IN_USERS,\n  payload: name,\n});\nexport const clearState = () => ({\n  type: ChatActionTypes.CLEAR_STATE,\n});\n","import { Avatar } from \"@material-ui/core\";\nimport React from \"react\";\n\n//called for each user with different props\nconst SidebarChat = (props) => {\n  const { username, displayPhoto } = props;\n\n  return (\n    <div className=\"sidebarChat\">\n      <Avatar src={displayPhoto} alt=\"profile-pic\" />\n      <div className=\"sidebar__chatInfo\">\n        <h2>{username}</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarChat;\n","import React from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport SidebarChat from \"../sidebar-chat/sidebarchat.component\";\nimport { connect } from \"react-redux\";\n\n//displays the sidebar with users online and current user's name and profile picture\nconst Sidebar = (props) => {\n  const { photo, displayName, usersList } = props;\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar src={photo} alt=\"profile-pic\" />\n        <div className=\"sidebar__headerRight\">\n          <h1 className=\"displayName\">{displayName}</h1>\n        </div>\n      </div>\n      <div className=\"sidebar__search\">\n        <h4 className=\"userList\">Group Members</h4>\n      </div>\n      <div className=\"sidebar__chats\">\n        {usersList ? (\n          usersList.map((user, i) => (\n            <div key={i}>\n              <SidebarChat\n                username={user.username}\n                displayPhoto={user.displayPhoto}\n              />\n            </div>\n          ))\n        ) : (\n          <SidebarChat />\n        )}\n      </div>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    photo: state.user.user.photo,\n    displayName: state.user.user.displayName,\n    usersList: state.chat.usersList,\n  };\n};\n\nexport default connect(mapStateToProps)(Sidebar);\n","import Chat from \"../../components/chat/chat.component\";\nimport Sidebar from \"../../components/sidebar/sidebar.component\";\nimport React from \"react\";\n\nconst Chatpage = () => {\n  return (\n    <div className=\"app\">\n      <div className=\"app__body\">\n        <Sidebar />\n        <Chat />\n      </div>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import { Link } from \"react-router-dom\";\nimport React, { useState } from \"react\";\nimport \"../../index.css\";\nimport { connect } from \"react-redux\";\nimport { addUser, addRoom } from \"../../redux/chats/chats.action\";\n\nconst UserDetails = (props) => {\n  const { username, addUserName, addRoomName } = props;\n  const [room, setRoom] = useState(\"\");\n  const saveUserNameAndRoom = () => {\n    addUserName(username);\n    addRoomName(room);\n  };\n\n  return (\n    <div className=\"centered-form\">\n      <div className=\"centered-form__box\">\n        <h1 className=\"centered-form__title\">Enter Room Name</h1>\n        <form>\n          <input\n            className=\"centered-form__input\"\n            type=\"text\"\n            placeholder=\"Room\"\n            onChange={(event) => setRoom(event.target.value)}\n            required\n          />\n          {/* <Link\n            onClick={(e) => (!username || !room ? e.preventDefault() : null)}\n            to={`/chat?username=${username}&room=${room}`}\n          > */}\n          <Link\n            onClick={(e) => (!username || !room ? e.preventDefault() : null)}\n            to=\"/chat\"\n          >\n            <button\n              className=\"centered-form__button\"\n              type=\"submit\"\n              onClick={saveUserNameAndRoom}\n            >\n              Join\n            </button>\n          </Link>\n        </form>\n      </div>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    username: state.user.user.displayName,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addUserName: (name) => dispatch(addUser(name)),\n    addRoomName: (room) => dispatch(addRoom(room)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UserDetails);\n","export default __webpack_public_path__ + \"static/media/chat.f2145cb2.png\";","import React from \"react\";\r\nimport { auth, provider } from \"../../firebase\";\r\nimport \"./login.styles.css\";\r\nimport chat from \"../../assets/images/chat.png\";\r\n\r\nconst LoginPage = () => {\r\n  const login = (e) => {\r\n    e.preventDefault();\r\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"forms-container\">\r\n        <div className=\"signin-signup\">\r\n          <form action=\"#\" className=\"formclass sign-in-form\">\r\n            <h2 className=\"title\">Welcome to Chat-App</h2>\r\n            <input\r\n              type=\"submit\"\r\n              onClick={login}\r\n              value=\"Login with Google\"\r\n              className=\"btn solid\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"panels-container\">\r\n        <div className=\"panel left-panel\">\r\n          <img src={chat} className=\"image\" alt=\"\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","export default __webpack_public_path__ + \"static/media/404error.4861ae77.svg\";","import React from \"react\";\r\nimport errorPage from \"../assets/images/404error.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { clearState } from \"../redux/chats/chats.action\";\r\nimport { logout } from \"../redux/user/user.action\";\r\nimport { auth } from \"../firebase\";\r\n\r\nconst ErrorPage = (props) => {\r\n  const { clearChatState, logout } = props;\r\n  const signMeOut = () => {\r\n    //dispatching action to clear user object in redux\r\n    clearChatState();\r\n\r\n    logout();\r\n    //Method provided by firebase to log out the user\r\n    auth.signOut();\r\n  };\r\n  return (\r\n    <div>\r\n      <img\r\n        className=\"errorPage\"\r\n        src={errorPage}\r\n        alt=\"Error 404 Page Not Found\"\r\n      />\r\n      <Link className=\"errorPage__link\" to=\"/\">\r\n        <button onClick={signMeOut}>Go To Login Page</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    clearChatState: () => dispatch(clearState()),\r\n    logout: () => dispatch(logout()),\r\n  };\r\n};\r\nexport default connect(null, mapDispatchToProps)(ErrorPage);\r\n","import \"./App.css\";\nimport Chatpage from \"./pages/chatpage/chatpage.component\";\nimport { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  withRouter,\n  Switch,\n} from \"react-router-dom\";\nimport UserDetails from \"./pages/userDetailPage/userDetailPage.component\";\nimport LoginPage from \"./pages/loginpage/login.component\";\nimport { connect } from \"react-redux\";\nimport { auth } from \"./firebase\";\nimport { login, logout } from \"./redux/user/user.action\";\nimport ErrorPage from \"./pages/errorPage\";\n\nfunction App(props) {\n  const { user, login, logout } = props;\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        login({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          email: authUser.email,\n          displayName: authUser.displayName,\n        });\n      } else {\n        logout();\n      }\n    });\n  }, [login, logout]);\n\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (user ? <Redirect to=\"/room\" /> : <LoginPage />)}\n          />\n          <Route exact path=\"/room\" component={UserDetails} />\n          <Route exact path=\"/chat\" component={Chatpage} />\n          <Route path=\"*\" component={ErrorPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.user,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (user) => dispatch(login(user)),\n    logout: () => dispatch(logout()),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n\n//Chat - Application tree ( not 100% complete )\n// Chatpage\n// \tSidebar\n// \t\tSidebarChat\n// \tChat\n// \t\tInfobar\n// \t\tInput\n// \t\tChatMessage\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { store, persistor } from \"./redux/store\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <PersistGate persistor={persistor}>\n          <App />\n        </PersistGate>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}